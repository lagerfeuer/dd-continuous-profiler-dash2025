plugins {
    id 'java'
    id 'application'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.sparkjava:spark-core:2.9.4'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.mongodb:mongodb-driver-sync:4.3.2'
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'org.slf4j:slf4j-api:2.0.0'

    runtimeOnly 'ch.qos.logback:logback-classic:1.4.0'
}

processResources {
    from('movies-v2.json.gz')
}

// Shared JVM arguments for all tasks
def sharedJvmArgs = [
    "-Xmx1g",
    "-XX:+ExitOnOutOfMemoryError",
    "-javaagent:dd-java-agent.jar",
    "-Ddd.profiling.enabled=true",
    "-Ddd.profiling.upload.period=10", // upload every 10s to see data faster
    "-Ddd.profiling.heap.histogram.enabled=true",
    "-XX:FlightRecorderOptions=stackdepth=256",
    "-Ddd.logs.injection=true",
    "-Ddd.trace.sample.rate=1",
    "-Ddd.env=prod",
    "-Ddd.version=${LocalDateTime.now().withNano(0)}",
]

// Task for running the main movies-api-java server
task runServer(type: JavaExec) {
    group = 'application'
    description = 'Runs the movies-api-java server (main api service profiling demos)'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'movies.Server'
    jvmArgs = sharedJvmArgs + [
        "-Ddd.service=movies-api-java",
    ]
}

// Task for running the leaky server
task runLeakyServer(type: JavaExec) {
    group = 'application'
    description = 'Runs the LeakyServer (memory-leaking service for profiling demos)'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'movies.LeakyServer'
    jvmArgs = sharedJvmArgs + [
        "-Ddd.service=leaky-api-java",
        "-Ddd.profiling.ddprof.liveheap.enabled=true",
    ]
}

java {
    toolchain {
        // not running correctly on instruqt (I think jdk 17 is running)
        languageVersion = JavaLanguageVersion.of(17)
    }
}
